// // ---------- N·ªÄN K√ù T·ª∞ R∆†I ----------
// const canvasMatrix = document.getElementById('matrix');
// const ctxMatrix = canvasMatrix.getContext('2d');

// canvasMatrix.height = window.innerHeight;
// canvasMatrix.width = window.innerWidth;

// const katakana = '„Ç¢„Ç´„Çµ„Çø„Éä„Éè„Éû„É§„É©„ÉØ„Ç§„Ç≠„Ç∑„ÉÅ„Éã„Éí„Éü„É™„Ç¶„ÇØ„Çπ„ÉÑ„Éå„Éï„É†„É¶„É´„Ç®„Ç±„Çª„ÉÜ„Éç„Éò„É°„É¨„Ç™„Ç≥„ÇΩ„Éà„Éé„Éõ„É¢„É®„É≠„É¥„É≥ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
// const chars = katakana.split('');
// const fontSize = 18;
// const columns = canvasMatrix.width / fontSize;
// const drops = Array(Math.floor(columns)).fill(1);

// function drawMatrix() {
//   ctxMatrix.fillStyle = 'rgba(0, 0, 0, 0.05)';
//   ctxMatrix.fillRect(0, 0, canvasMatrix.width, canvasMatrix.height);

//   ctxMatrix.font = fontSize + 'px monospace';

//   drops.forEach((y, x) => {
//     ctxMatrix.fillStyle = Math.random() > 0.5 ? '#ff0000' : '#00bfff';
//     const text = chars[Math.floor(Math.random() * chars.length)];
//     ctxMatrix.fillText(text, x * fontSize, y * fontSize);

//     if (y * fontSize > canvasMatrix.height && Math.random() > 0.975) {
//       drops[x] = 0;
//     }
//     drops[x]++;
//   });
// }
// setInterval(drawMatrix, 33);

// // ---------- COUNTDOWN K√ù T·ª∞ ----------
// const canvasCountdown = document.getElementById('countdown');
// const ctxCountdown = canvasCountdown.getContext('2d');
// canvasCountdown.width = window.innerWidth;
// canvasCountdown.height = window.innerHeight;

// const numbers = ['3', '2', '1'];
// let currentIndex = 0;

// function drawNumberAsChars(number) {
//   ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);

//   const tempCanvas = document.createElement('canvas');
//   const tempCtx = tempCanvas.getContext('2d');
//   tempCanvas.width = 300;
//   tempCanvas.height = 300;

//   tempCtx.fillStyle = '#fff';
//   tempCtx.font = 'bold 250px monospace';
//   tempCtx.textAlign = 'center';
//   tempCtx.textBaseline = 'middle';
//   tempCtx.fillText(number, tempCanvas.width / 2, tempCanvas.height / 2);

//   const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
//   const particles = [];

//   for (let y = 0; y < tempCanvas.height; y += 5) {
//     for (let x = 0; x < tempCanvas.width; x += 5) {
//       const index = (y * tempCanvas.width + x) * 4;
//       if (imageData.data[index + 3] > 128) {
//         const char = chars[Math.floor(Math.random() * chars.length)];
//         particles.push({ x, y, char });
//       }
//     }
//   }

//   particles.forEach(p => {
//     ctxCountdown.fillStyle = '#ff4eb8';
//     ctxCountdown.font = '16px monospace';
//     ctxCountdown.fillText(
//       p.char,
//       canvasCountdown.width / 2 - tempCanvas.width / 2 + p.x,
//       canvasCountdown.height / 2 - tempCanvas.height / 2 + p.y
//     );
//   });
// }

// setTimeout(() => {
//   const interval = setInterval(() => {
//     drawNumberAsChars(numbers[currentIndex]);
//     currentIndex++;
//     if (currentIndex >= numbers.length) {
//       clearInterval(interval);
//       setTimeout(() => {
//         ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);
//         startQuestionFlow();
//       }, 1000);
//     }
//   }, 1000);
// }, 2000);

// // ---------- PH·∫¶N C√ÇU H·ªéI V·ªöI 2 N√öT C√ì V√Ä KH√îNG ----------
// const positiveAnswers = [
//   "T√¥i bi·∫øt m√† hihi",
//   "T√¥i c≈©ng th√≠ch b·∫°n nhi·ªÅu l·∫Øm ‚ù§"
// ];

// const negativeLoop = [
//   "Ch·∫Øc ch·∫Øn ch·ª©?",
//   "Suy nghƒ© kƒ© ch∆∞a?",
//   "Suy nghƒ© l·∫°i ƒëi...",
//   "NƒÉn n·ªâ m√†...",
//   "H·ªèi l·∫°i nh√©, b·∫°n th√≠ch t√¥i kh√¥ng?",
//   "B·∫°n th√≠ch t√¥i kh√¥ng?"
// ];

// const finalText = `Em √†, trong cu·ªôc s·ªëng c·ªßa anh, em nh∆∞ m·ªôt vi√™n ng·ªçc qu√Ω m√† nh√¢n duy√™n ƒë√£ ban t·∫∑ng. M·ªói ng√†y tr√¥i qua, anh c√†ng nh·∫≠n ra gi√° tr·ªã c·ªßa em kh√¥ng ch·ªâ n·∫±m ·ªü v·∫ª ƒë·∫πp b√™n ngo√†i m√† c√≤n ·ªü t√¢m h·ªìn ·∫•m √°p v√† tr√°i tim ch√¢n th√†nh. Em l√† ngu·ªìn ƒë·ªông l·ª±c gi√∫p anh v∆∞·ª£t qua nh·ªØng kh√≥ khƒÉn, l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† chia s·∫ª. Nh·ªØng kho·∫£nh kh·∫Øc b√™n em, t·ª´ nh·ªØng ti·∫øng c∆∞·ªùi ƒë·∫øn nh·ªØng gi√¢y ph√∫t l·∫∑ng im, ƒë·ªÅu tr·ªü th√†nh nh·ªØng k·ª∑ ni·ªám qu√Ω gi√° m√† anh s·∫Ω tr√¢n tr·ªçng m√£i m√£i. Em kh√¥ng ch·ªâ l√† ng∆∞·ªùi anh th∆∞∆°ng, m√† c√≤n l√† √°nh s√°ng d·∫´n ƒë∆∞·ªùng trong cu·ªôc s·ªëng c·ªßa anh. Anh c·∫£m th·∫•y may m·∫Øn v√† bi·∫øt ∆°n v√¨ c√≥ em b√™n c·∫°nh, v√† anh s·∫Ω lu√¥n n·ªó l·ª±c ƒë·ªÉ b·∫£o v·ªá v√† g√¨n gi·ªØ vi√™n ng·ªçc qu√Ω n√†y.`;

// let questionState = 'askLike';
// let positiveIndex = 0;
// let negativeIndex = 0;

// function startQuestionFlow() {
//   questionState = 'askLike';
//   positiveIndex = 0;
//   negativeIndex = 0;
//   updateQuestion("B·∫°n c√≥ th√≠ch t√¥i kh√¥ng?");
//   showQuestionBox();

//   const yesBtn = document.getElementById('yesBtn');
//   yesBtn.style.display = 'inline-block';
//   yesBtn.textContent = 'C√≥';

//   document.getElementById('noBtn').style.display = 'inline-block';
//   document.getElementById('thankBtn').style.display = 'none';

//   document.getElementById('message').textContent = '';
// }

// function updateQuestion(text) {
//   const questionTextElem = document.getElementById('question-text');
//   const message = document.getElementById('message');
//   message.textContent = '';
//   questionTextElem.textContent = text;
// }

// function showQuestionBox() {
//   document.getElementById('question-box').classList.remove('hidden');
// }

// // H√†m hi·ªáu ·ª©ng g√µ ch·ªØ t·ª´ng k√≠ t·ª±, xu·ªëng d√≤ng sau 50 k√Ω t·ª± t·∫°i kho·∫£ng tr·∫Øng
// async function typeWriter(text, element) {
//   element.textContent = '';
//   let delay = 50; // t·ªëc ƒë·ªô g√µ 50ms

//   for (let i = 0; i < text.length; i++) {
//     element.textContent += text.charAt(i);
//     await new Promise(resolve => setTimeout(resolve, delay));
//   }
// }

// document.getElementById('yesBtn').addEventListener('click', async () => {
//   if (questionState === 'askLike' || questionState === 'negative') {
//     questionState = 'positive';

//     if (positiveIndex === 0) {
//       updateQuestion(positiveAnswers[positiveIndex]);
//       positiveIndex++;
//       document.getElementById('noBtn').style.display = 'none';

//       const yesBtn = document.getElementById('yesBtn');
//       yesBtn.textContent = 'OK';

//       document.getElementById('message').textContent = '';

//     } else if (positiveIndex === 1) {
//       updateQuestion(positiveAnswers[positiveIndex]);
//       positiveIndex++;

//       const yesBtn = document.getElementById('yesBtn');
//       yesBtn.textContent = 'OK';

//       document.getElementById('message').textContent = '';
//     }
//   } else if (questionState === 'positive') {
//     if (positiveIndex < positiveAnswers.length) {
//       updateQuestion(positiveAnswers[positiveIndex]);
//       positiveIndex++;
//       document.getElementById('message').textContent = '';
//     } else {
//       // ·∫®n n√∫t OK v√† ·∫©n c√¢u h·ªèi ch√≠nh
//       const yesBtn = document.getElementById('yesBtn');
//       yesBtn.style.display = 'none';
//       document.getElementById('question-text').textContent = '';

//       const messageElem = document.getElementById('message');
//       messageElem.textContent = '';
//       await typeWriter(finalText, messageElem);

//       // Hi·ªán n√∫t C·∫£m ∆°n anh b√™n d∆∞·ªõi ƒëo·∫°n vƒÉn, b√™n g√≥c ph·∫£i
//       const thankBtn = document.getElementById('thankBtn');
//       thankBtn.style.display = 'inline-block';
//     }
//   }
// });

// document.getElementById('noBtn').addEventListener('click', () => {
//   if (questionState === 'askLike' || questionState === 'negative') {
//     questionState = 'negative';
//     if (negativeIndex >= negativeLoop.length) negativeIndex = 0;
//     updateQuestion(negativeLoop[negativeIndex]);
//     negativeIndex++;
//     document.getElementById('yesBtn').style.display = 'inline-block';
//     document.getElementById('noBtn').style.display = 'inline-block';
//   }
// });

// // X·ª≠ l√Ω khi click n√∫t C·∫£m ∆°n anh
// document.getElementById('thankBtn').addEventListener('click', () => {
//   const thankBtn = document.getElementById('thankBtn');
//   thankBtn.style.display = 'none';

//   // ·∫®n h·∫øt ph·∫ßn tr∆∞·ªõc
//   document.getElementById('message').textContent = '';
//   document.getElementById('question-text').textContent = '';
//   document.getElementById('yesBtn').style.display = 'none';
//   document.getElementById('noBtn').style.display = 'none';

//   const questionBox = document.getElementById('question-box');
//   questionBox.innerHTML = '';

//   // T·∫°o div m·ªõi hi·ªÉn th·ªã l·ªùi c·∫£m ∆°n
//   const thankMessage = document.createElement('div');
//   thankMessage.textContent = 'Anh y√™u em! üíñ';
//   thankMessage.style.color = '#ff4eb8';
//   thankMessage.style.fontSize = '32px';
//   thankMessage.style.fontWeight = 'bold';
//   thankMessage.style.fontFamily = 'monospace';
//   thankMessage.style.textAlign = 'center';
//   thankMessage.style.whiteSpace = 'nowrap';
//   thankMessage.style.marginTop = '100px';
//   thankMessage.style.textShadow =
//     '0 0 5px #ff4eb8, 0 0 10px #ff4eb8, 0 0 20px #ff4eb8, 0 0 30px #ff4eb8';

//   questionBox.appendChild(thankMessage);
//   questionBox.classList.remove('hidden');
// });







// if (screen.orientation && screen.orientation.lock) {
//   screen.orientation.lock("landscape").catch(function(error) {
//     console.log("Kh√¥ng th·ªÉ kh√≥a m√†n h√¨nh:", error);
//   });
// }









































// ---------- N·ªÄN K√ù T·ª∞ R∆†I ----------
const canvasMatrix = document.getElementById('matrix');
const ctxMatrix = canvasMatrix.getContext('2d');

function resizeMatrix() {
  canvasMatrix.height = window.innerHeight;
  canvasMatrix.width = window.innerWidth;
  columns = Math.floor(canvasMatrix.width / fontSize);
  drops = Array(columns).fill(1);
}
canvasMatrix.height = window.innerHeight;
canvasMatrix.width = window.innerWidth;

const katakana = '„Ç¢„Ç´„Çµ„Çø„Éä„Éè„Éû„É§„É©„ÉØ„Ç§„Ç≠„Ç∑„ÉÅ„Éã„Éí„Éü„É™„Ç¶„ÇØ„Çπ„ÉÑ„Éå„Éï„É†„É¶„É´„Ç®„Ç±„Çª„ÉÜ„Éç„Éò„É°„É¨„Ç™„Ç≥„ÇΩ„Éà„Éé„Éõ„É¢„É®„É≠„É¥„É≥ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
const chars = katakana.split('');
const fontSize = 18;
let columns = canvasMatrix.width / fontSize;
let drops = Array(Math.floor(columns)).fill(1);

function drawMatrix() {
  ctxMatrix.fillStyle = 'rgba(0, 0, 0, 0.05)';
  ctxMatrix.fillRect(0, 0, canvasMatrix.width, canvasMatrix.height);

  ctxMatrix.font = fontSize + 'px monospace';

  drops.forEach((y, x) => {
    ctxMatrix.fillStyle = Math.random() > 0.5 ? '#ff0000' : '#00bfff';
    const text = chars[Math.floor(Math.random() * chars.length)];
    ctxMatrix.fillText(text, x * fontSize, y * fontSize);

    if (y * fontSize > canvasMatrix.height && Math.random() > 0.975) {
      drops[x] = 0;
    }
    drops[x]++;
  });
}
setInterval(drawMatrix, 33);

// L·∫Øng nghe thay ƒë·ªïi k√≠ch th∆∞·ªõc (mobile + desktop)
window.addEventListener('resize', resizeMatrix);


// ---------- COUNTDOWN K√ù T·ª∞ ----------
const canvasCountdown = document.getElementById('countdown');
const ctxCountdown = canvasCountdown.getContext('2d');
canvasCountdown.width = window.innerWidth;
canvasCountdown.height = window.innerHeight;

const numbers = ['3', '2', '1'];
let currentIndex = 0;

function drawNumberAsChars(number) {
  ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);

  const tempCanvas = document.createElement('canvas');
  const tempCtx = tempCanvas.getContext('2d');
  tempCanvas.width = 300;
  tempCanvas.height = 300;

  tempCtx.fillStyle = '#fff';
  tempCtx.font = 'bold 250px monospace';
  tempCtx.textAlign = 'center';
  tempCtx.textBaseline = 'middle';
  tempCtx.fillText(number, tempCanvas.width / 2, tempCanvas.height / 2);

  const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
  const particles = [];

  for (let y = 0; y < tempCanvas.height; y += 5) {
    for (let x = 0; x < tempCanvas.width; x += 5) {
      const index = (y * tempCanvas.width + x) * 4;
      if (imageData.data[index + 3] > 128) {
        const char = chars[Math.floor(Math.random() * chars.length)];
        particles.push({ x, y, char });
      }
    }
  }

  particles.forEach(p => {
    ctxCountdown.fillStyle = '#ff4eb8';
    ctxCountdown.font = '16px monospace';
    ctxCountdown.fillText(
      p.char,
      canvasCountdown.width / 2 - tempCanvas.width / 2 + p.x,
      canvasCountdown.height / 2 - tempCanvas.height / 2 + p.y
    );
  });
}

setTimeout(() => {
  const interval = setInterval(() => {
    drawNumberAsChars(numbers[currentIndex]);
    currentIndex++;
    if (currentIndex >= numbers.length) {
      clearInterval(interval);
      setTimeout(() => {
        ctxCountdown.clearRect(0, 0, canvasCountdown.width, canvasCountdown.height);
        startQuestionFlow();
      }, 1000);
    }
  }, 1000);
}, 2000);

// ---------- PH·∫¶N C√ÇU H·ªéI V·ªöI 2 N√öT C√ì V√Ä KH√îNG ----------
const positiveAnswers = [
  "T√¥i bi·∫øt m√† hihi",
  "T√¥i c≈©ng th√≠ch b·∫°n nhi·ªÅu l·∫Øm ‚ù§"
];

const negativeLoop = [
  "Ch·∫Øc ch·∫Øn ch·ª©?",
  "Suy nghƒ© kƒ© ch∆∞a?",
  "Suy nghƒ© l·∫°i ƒëi...",
  "NƒÉn n·ªâ m√†...",
  "H·ªèi l·∫°i nh√©, b·∫°n th√≠ch t√¥i kh√¥ng?",
  "B·∫°n th√≠ch t√¥i kh√¥ng?"
];

const finalText = `Em √†, trong cu·ªôc s·ªëng c·ªßa anh, em nh∆∞ m·ªôt vi√™n ng·ªçc qu√Ω m√† nh√¢n duy√™n ƒë√£ ban t·∫∑ng. M·ªói ng√†y tr√¥i qua, anh c√†ng nh·∫≠n ra gi√° tr·ªã c·ªßa em kh√¥ng ch·ªâ n·∫±m ·ªü v·∫ª ƒë·∫πp b√™n ngo√†i m√† c√≤n ·ªü t√¢m h·ªìn ·∫•m √°p v√† tr√°i tim ch√¢n th√†nh. Em l√† ngu·ªìn ƒë·ªông l·ª±c gi√∫p anh v∆∞·ª£t qua nh·ªØng kh√≥ khƒÉn, l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† chia s·∫ª. Nh·ªØng kho·∫£nh kh·∫Øc b√™n em, t·ª´ nh·ªØng ti·∫øng c∆∞·ªùi ƒë·∫øn nh·ªØng gi√¢y ph√∫t l·∫∑ng im, ƒë·ªÅu tr·ªü th√†nh nh·ªØng k·ª∑ ni·ªám qu√Ω gi√° m√† anh s·∫Ω tr√¢n tr·ªçng m√£i m√£i. Em kh√¥ng ch·ªâ l√† ng∆∞·ªùi anh th∆∞∆°ng, m√† c√≤n l√† √°nh s√°ng d·∫´n ƒë∆∞·ªùng trong cu·ªôc s·ªëng c·ªßa anh. Anh c·∫£m th·∫•y may m·∫Øn v√† bi·∫øt ∆°n v√¨ c√≥ em b√™n c·∫°nh, v√† anh s·∫Ω lu√¥n n·ªó l·ª±c ƒë·ªÉ b·∫£o v·ªá v√† g√¨n gi·ªØ vi√™n ng·ªçc qu√Ω n√†y.`;

let questionState = 'askLike';
let positiveIndex = 0;
let negativeIndex = 0;

function startQuestionFlow() {
  questionState = 'askLike';
  positiveIndex = 0;
  negativeIndex = 0;
  updateQuestion("B·∫°n c√≥ th√≠ch t√¥i kh√¥ng?");
  showQuestionBox();

  const yesBtn = document.getElementById('yesBtn');
  yesBtn.style.display = 'inline-block';
  yesBtn.textContent = 'C√≥';

  document.getElementById('noBtn').style.display = 'inline-block';
  document.getElementById('thankBtn').style.display = 'none';

  document.getElementById('message').textContent = '';
}

function updateQuestion(text) {
  const questionTextElem = document.getElementById('question-text');
  const message = document.getElementById('message');
  message.textContent = '';
  questionTextElem.textContent = text;
}

function showQuestionBox() {
  document.getElementById('question-box').classList.remove('hidden');
}

// H√†m hi·ªáu ·ª©ng g√µ ch·ªØ t·ª´ng k√≠ t·ª±
async function typeWriter(text, element) {
  element.textContent = '';
  let delay = 50;
  for (let i = 0; i < text.length; i++) {
    element.textContent += text.charAt(i);
    await new Promise(resolve => setTimeout(resolve, delay));
  }
}

document.getElementById('yesBtn').addEventListener('click', async () => {
  if (questionState === 'askLike' || questionState === 'negative') {
    questionState = 'positive';
    if (positiveIndex === 0) {
      updateQuestion(positiveAnswers[positiveIndex]);
      positiveIndex++;
      document.getElementById('noBtn').style.display = 'none';
      document.getElementById('yesBtn').textContent = 'OK';
      document.getElementById('message').textContent = '';
    } else if (positiveIndex === 1) {
      updateQuestion(positiveAnswers[positiveIndex]);
      positiveIndex++;
      document.getElementById('yesBtn').textContent = 'OK';
      document.getElementById('message').textContent = '';
    }
  } else if (questionState === 'positive') {
    if (positiveIndex < positiveAnswers.length) {
      updateQuestion(positiveAnswers[positiveIndex]);
      positiveIndex++;
      document.getElementById('message').textContent = '';
    } else {
      document.getElementById('yesBtn').style.display = 'none';
      document.getElementById('question-text').textContent = '';
      const messageElem = document.getElementById('message');
      messageElem.textContent = '';
      await typeWriter(finalText, messageElem);
      const thankBtn = document.getElementById('thankBtn');
      thankBtn.style.display = 'inline-block';
    }
  }
});

document.getElementById('noBtn').addEventListener('click', () => {
  if (questionState === 'askLike' || questionState === 'negative') {
    questionState = 'negative';
    if (negativeIndex >= negativeLoop.length) negativeIndex = 0;
    updateQuestion(negativeLoop[negativeIndex]);
    negativeIndex++;
    document.getElementById('yesBtn').style.display = 'inline-block';
    document.getElementById('noBtn').style.display = 'inline-block';
  }
});

document.getElementById('thankBtn').addEventListener('click', () => {
  document.getElementById('thankBtn').style.display = 'none';
  document.getElementById('message').textContent = '';
  document.getElementById('question-text').textContent = '';
  document.getElementById('yesBtn').style.display = 'none';
  document.getElementById('noBtn').style.display = 'none';
  const questionBox = document.getElementById('question-box');
  questionBox.innerHTML = '';
  const thankMessage = document.createElement('div');
  thankMessage.textContent = 'Anh y√™u em! üíñ';
  thankMessage.style.color = '#ff4eb8';
  thankMessage.style.fontSize = '32px';
  thankMessage.style.fontWeight = 'bold';
  thankMessage.style.fontFamily = 'monospace';
  thankMessage.style.textAlign = 'center';
  thankMessage.style.whiteSpace = 'nowrap';
  thankMessage.style.marginTop = '100px';
  thankMessage.style.textShadow =
    '0 0 5px #ff4eb8, 0 0 10px #ff4eb8, 0 0 20px #ff4eb8, 0 0 30px #ff4eb8';
  questionBox.appendChild(thankMessage);
  questionBox.classList.remove('hidden');
});

// ---------- KH√ìA XOAY M√ÄN H√åNH ----------
if (screen.orientation && screen.orientation.lock) {
  screen.orientation.lock("landscape").catch(function(error) {
    console.log("Kh√¥ng th·ªÉ kh√≥a m√†n h√¨nh:", error);
  });
}
